http://162.55.220.72:5005/first
	1. Отправить запрос.
	2. Статус код 200
pm.test("Correct string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

	3. Проверить, что в body приходит правильный string.
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

http://162.55.220.72:5005/user_info_3
	1. Отправить запрос.
	2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
	3. Спарсить response body в json.
var response = JSON.parse(responseBody);
	4. Проверить, что name в ответе равно name s request (name вбить руками.)

pm.test("Correct name", function () {
        pm.expect(response.name).to.eql("Dima");
});
	5. Проверить, что age в ответе равно age s request (age вбить руками.)

pm.test("Correct age", function () {
        pm.expect(response.age).to.eql("30");
});
	6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Correct salary", function () {
        pm.expect(response.salary).to.eql(350);
});
	7. Спарсить request.
var req = request.data;
	8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Correct name_1", function () {
        pm.expect(response.name).to.eql(req.name);
});
	9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Correct age_1", function () {
        pm.expect(response.age).to.eql(req.age);
});
	10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Correct salary_1", function () {
        pm.expect(response.salary).to.eql(1*(req.salary));
});
	11. Вывести в консоль параметр family из response.
console.log(response.family)
	12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("Correct salary_2", function () {
        pm.expect(response.family.u_salary_1_5_year).to.eql(req.salary*4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
	2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
	3. Спарсить response body в json.
var response = JSON.parse(responseBody);
	4. Спарсить request.
var name = pm.request.url.query.get("name")
var age = pm.request.url.query.get("age")
var salary = +pm.request.url.query.get("salary")
	5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Correct name", function () {
       pm.expect(response.name).to.eql(name);
}); 
	6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Correct age", function () {
       pm.expect(response.age).to.eql(age);
});
	7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Correct salary", function () {
       pm.expect(response.salary).to.eql(salary);
});
	8. Вывести в консоль параметр family из response.
console.log(response.family)
	9. Проверить, что у параметра dog есть параметры name.


	10. Проверить, что у параметра dog есть параметры age.
pm.test("Correct salary", function () {
       pm.expect(response.family.pets.dog).to.have.property("name")
});
	11. Проверить, что параметр name имеет значение Luky.
pm.test("Correct dog's name", function () {
       pm.expect(response.family.pets.dog.name).to.eql("Luky")
});
12. Проверить, что параметр age имеет значение 4.
pm.test("Correct dog's age", function () {
       pm.expect(response.family.pets.dog.age).to.eql(4)
});


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
	2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
	3. Спарсить response body в json.
var response = JSON.parse(responseBody);
	4. Спарсить request.
var name = pm.request.url.query.get("name");
var age = +pm.request.url.query.get("age");
var salary = +pm.request.url.query.get("salary");
	5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Correct name", function () {
        pm.expect(response.name).to.eql(name);
});    
	6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Correct age", function () {
        pm.expect(response.age).to.eql(age);
});
	7. Вывести в консоль параметр salary из request.
console.log(pm.request.url.query.get("salary"));
	8. Вывести в консоль параметр salary из response.
console.log(response.salary);
	9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(response.salary[0]);	
	10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(response.salary[1]);
	11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(response.salary[2]);
	12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Correct salary_n1", function () {
        pm.expect(response.salary[0]).to.eql(salary);
});
	13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Correct salary_n2", function () {
        pm.expect(+response.salary[1]).to.eql(salary*2);
});
	14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Correct salary_n3", function () {
        pm.expect(+response.salary[2]).to.eql(salary*3);
});
	15. Создать в окружении переменную name
var name = response.name
	16. Создать в окружении переменную age
var age = response.age
	17. Создать в окружении переменную salary
var salary = response.salary[0]
	18. Передать в окружение переменную name
pm.environment.set("name", name);
	19. Передать в окружение переменную age
pm.environment.set("age", age);
	20. Передать в окружение переменную salary
pm.environment.set("salary", salary);
	21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
var count = 0;
while (count < Object.keys(response.salary).length) {
    console.log(response.salary[count]);
    count += 1;
};

http://162.55.220.72:5005/user_info_2
	1. Вставить параметр salary из окружения в request
{{salary}}
	2. Вставить параметр age из окружения в age
{{age}}
	3. Вставить параметр name из окружения в name
{{name}}
	4. Отправить запрос.
	5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
	6. Спарсить response body в json.
var response = JSON.parse(responseBody);
	7. Спарсить request.
var request = request.data;
	8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Response have param = start_qa_salary", function () {
       pm.expect(response).to.have.property("start_qa_salary")
});
	9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Response have param = qa_salary_after_6_months", function () {
       pm.expect(response).to.have.property("qa_salary_after_6_months")
});
	10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Response have param = qa_salary_after_12_months", function () {
       pm.expect(response).to.have.property("qa_salary_after_12_months")
});
	11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Response have param = qa_salary_after_1.5_year", function () {
       pm.expect(response).to.have.property("qa_salary_after_1.5_year")
});
	12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Response have param = qa_salary_after_3.5_years", function () {
       pm.expect(response).to.have.property("qa_salary_after_3.5_years")
});
	13. Проверить, что json response имеет параметр person
pm.test("Response have param = person", function () {
       pm.expect(response).to.have.property("person")
});
	14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Correct start_qa_salary ", function () {
       pm.expect(response.start_qa_salary).to.eql(+request.salary)
});
	15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Correct qa_salary_after_6_months ", function () {
       pm.expect(response.qa_salary_after_6_months).to.eql(request.salary*2)
});
	16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Correct qa_salary_after_12_months ", function () {
       pm.expect(response.qa_salary_after_12_months).to.eql(request.salary*2.7)
});
	17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
var a = response["qa_salary_after_1.5_year"];
pm.test("Correct qa_salary_after_1.5_years", function () {
       pm.expect(a).to.eql(request.salary*3.3)
});
	18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
var b = response["qa_salary_after_3.5_years"];
pm.test("Correct qa_salary_after_3.5_years", function () {
       pm.expect(b).to.eql(request.salary*3.8)
});
	19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Correct param u_name", function () {
       pm.expect(response.person.u_name[1]).to.eql(+request.salary)
});
	20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("Correct param u_age", function () {
       pm.expect(response.person.u_age).to.eql(+request.age)
});
	21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("Correct param u_salary_5_years", function () {
       pm.expect(response.person.u_salary_5_years).to.eql(request.salary*4.2)
});
	22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for (var prop in response.person ) {
    console.log ("person " + prop + " = " + response.person[prop]);
};